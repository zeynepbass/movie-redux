import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { WorkerFarm } from 'web-worker-helper';
// @ts-ignore
// TODO 暂时注释掉，后续需要修改
// import WorkerInlineSource from '../../dist/l7-utils.worker.js';
import { WorkerSourceMap } from "../workers";
import { getWorkerSource, registerWorkerSource } from "./worker-map";
export { WorkerSourceMap };
var L7_WORKER_NAME = 'l7-worker';
var WORKER_MAX_CONCURRENCY = 3;
var WORKER_REUSE = true;
export function setL7WorkerSource(workerSource) {
  registerWorkerSource(L7_WORKER_NAME, workerSource);
}
function getL7WorkerSource() {
  var workerSource = getWorkerSource(L7_WORKER_NAME);
  if (!workerSource) {
    throw new Error("get worker failed by workerName: ".concat(L7_WORKER_NAME, "."));
  }
  return workerSource;
}
export function executeWorkerTask(_x, _x2) {
  return _executeWorkerTask.apply(this, arguments);
}

// setL7WorkerSource(WorkerInlineSource);
function _executeWorkerTask() {
  _executeWorkerTask = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(workerType, data) {
    var source, workerFarm, workerPool, job, result;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          source = getL7WorkerSource();
          workerFarm = WorkerFarm.getWorkerFarm({
            maxConcurrency: WORKER_MAX_CONCURRENCY,
            reuseWorkers: WORKER_REUSE
          });
          workerPool = workerFarm.getWorkerPool({
            name: L7_WORKER_NAME,
            source: source
          });
          _context.next = 5;
          return workerPool.startJob(L7_WORKER_NAME, function (myJob, type, myData) {
            return myJob.done(myData);
          });
        case 5:
          job = _context.sent;
          job.postMessage('process', {
            input: {
              workerType: workerType,
              data: data
            }
          });
          _context.next = 9;
          return job.result;
        case 9:
          result = _context.sent;
          return _context.abrupt("return", result.result);
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _executeWorkerTask.apply(this, arguments);
}