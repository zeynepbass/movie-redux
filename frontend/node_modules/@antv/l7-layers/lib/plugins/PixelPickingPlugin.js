"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _inversify = require("inversify");
require("reflect-metadata");
var _CommonStyleAttribute = require("../core/CommonStyleAttribute");
var _dec, _class;
var PickingStage = {
  NONE: 0.0,
  ENCODE: 1.0,
  HIGHLIGHT: 2.0
};
var PixelPickingPlugin = exports.default = (_dec = (0, _inversify.injectable)(), _dec(_class = /*#__PURE__*/function () {
  function PixelPickingPlugin() {
    (0, _classCallCheck2.default)(this, PixelPickingPlugin);
    (0, _defineProperty2.default)(this, "PickOption", {
      u_HighlightColor: [1, 0, 0, 1],
      u_SelectColor: [1, 0, 0, 1],
      u_PickingColor: [0, 0, 0],
      u_PickingStage: 0,
      u_CurrentSelectedId: [0, 0, 0],
      u_PickingThreshold: 10,
      u_PickingBuffer: 0,
      // TODO: 更新机制
      u_shaderPick: 0,
      u_EnableSelect: 0,
      u_activeMix: 0
    });
  }
  (0, _createClass2.default)(PixelPickingPlugin, [{
    key: "pickOption2Array",
    value: function pickOption2Array() {
      return Object.values(this.PickOption).flat();
    }
  }, {
    key: "updatePickOption",
    value: function updatePickOption(option, rendererService) {
      var _this = this;
      Object.keys(option).forEach(function (key) {
        _this.PickOption[key] = option[key];
      });
      rendererService.uniformBuffers[1].subData({
        offset: 0,
        data: new Uint8Array(new Float32Array(this.pickOption2Array()))
      });
    }
  }, {
    key: "apply",
    value: function apply(layer, _ref) {
      var _this2 = this;
      var rendererService = _ref.rendererService,
        styleAttributeService = _ref.styleAttributeService;
      if (!rendererService.uniformBuffers[1]) {
        // Create a Uniform Buffer Object(UBO).
        var uniformBuffer = rendererService.createBuffer({
          // vec4 u_HighlightColor;
          // vec4 u_SelectColor;
          // vec3 u_PickingColor;
          // float u_PickingStage;
          // vec3 u_CurrentSelectedId;
          // float u_PickingThreshold;
          // float u_PickingBuffer;
          // float u_shaderPick;
          // float u_EnableSelect;
          // float u_activeMix;
          data: new Float32Array(this.pickOption2Array().length),
          isUBO: true
        });
        rendererService.uniformBuffers[1] = uniformBuffer;
        this.updatePickOption({}, rendererService);
      }
      // u_PickingBuffer: layer.getLayerConfig().pickingBuffer || 0,
      // // Tip: 当前地图是否在拖动
      // u_shaderPick: Number(layer.getShaderPickStat()),

      // TODO: 由于 Shader 目前无法根据是否开启拾取进行内容修改，因此即使不开启也需要生成 a_PickingColor
      layer.hooks.init.tapPromise('PixelPickingPlugin', function () {
        var _layer$getLayerConfig = layer.getLayerConfig(),
          enablePicking = _layer$getLayerConfig.enablePicking;
        styleAttributeService.registerStyleAttribute({
          name: 'pickingColor',
          type: _l7Core.AttributeType.Attribute,
          descriptor: {
            name: 'a_PickingColor',
            shaderLocation: _CommonStyleAttribute.ShaderLocation.PICKING_COLOR,
            buffer: {
              data: [],
              type: _l7Core.gl.FLOAT
            },
            size: 3,
            // TODO: 固定 feature range 范围内的 pickingColor 都是固定的，可以生成 cache
            update: function update(feature) {
              // 只有开启拾取才需要 encode
              var id = feature.id;
              return enablePicking ? (0, _l7Utils.encodePickingColor)(id) : [0, 0, 0];
            }
          }
        });
      });
      // 必须要与 PixelPickingPass 结合使用，因此必须开启 multiPassRenderer
      layer.hooks.beforePickingEncode.tap('PixelPickingPlugin', function () {
        var _layer$getLayerConfig2 = layer.getLayerConfig(),
          enablePicking = _layer$getLayerConfig2.enablePicking;
        if (enablePicking && layer.isVisible()) {
          _this2.updatePickOption({
            u_PickingStage: PickingStage.ENCODE
          }, rendererService);
          layer.models.forEach(function (model) {
            return model.addUniforms({
              u_PickingStage: PickingStage.ENCODE
            });
          });
        }
      });
      layer.hooks.afterPickingEncode.tap('PixelPickingPlugin', function () {
        var _layer$getLayerConfig3 = layer.getLayerConfig(),
          enablePicking = _layer$getLayerConfig3.enablePicking;
        // 区分选中高亮 和滑过高亮
        if (enablePicking && layer.isVisible()) {
          _this2.updatePickOption({
            u_PickingStage: PickingStage.HIGHLIGHT
          }, rendererService);
          layer.models.forEach(function (model) {
            return model.addUniforms({
              u_PickingStage: PickingStage.HIGHLIGHT
            });
          });
        }
      });
      layer.hooks.beforeHighlight.tap('PixelPickingPlugin', function (pickedColor) {
        var _layer$getLayerConfig4 = layer.getLayerConfig(),
          highlightColor = _layer$getLayerConfig4.highlightColor,
          _layer$getLayerConfig5 = _layer$getLayerConfig4.activeMix,
          activeMix = _layer$getLayerConfig5 === void 0 ? 0 : _layer$getLayerConfig5;
        var highlightColorInArray = typeof highlightColor === 'string' ? (0, _l7Utils.rgb2arr)(highlightColor) : highlightColor || [1, 0, 0, 1];
        layer.updateLayerConfig({
          pickedFeatureID: (0, _l7Utils.decodePickingColor)(new Uint8Array(pickedColor))
        });
        var option = {
          u_PickingStage: PickingStage.HIGHLIGHT,
          u_PickingColor: pickedColor,
          u_HighlightColor: highlightColorInArray.map(function (c) {
            return c * 255;
          }),
          u_activeMix: activeMix
        };
        _this2.updatePickOption(option, rendererService);
        layer.models.forEach(function (model) {
          return model.addUniforms(option);
        });
      });
      layer.hooks.beforeSelect.tap('PixelPickingPlugin', function (pickedColor) {
        var _layer$getLayerConfig6 = layer.getLayerConfig(),
          selectColor = _layer$getLayerConfig6.selectColor,
          _layer$getLayerConfig7 = _layer$getLayerConfig6.selectMix,
          selectMix = _layer$getLayerConfig7 === void 0 ? 0 : _layer$getLayerConfig7;
        var highlightColorInArray = typeof selectColor === 'string' ? (0, _l7Utils.rgb2arr)(selectColor) : selectColor || [1, 0, 0, 1];
        layer.updateLayerConfig({
          pickedFeatureID: (0, _l7Utils.decodePickingColor)(new Uint8Array(pickedColor))
        });
        var option = {
          u_PickingStage: PickingStage.HIGHLIGHT,
          u_PickingColor: pickedColor,
          u_HighlightColor: highlightColorInArray.map(function (c) {
            return c * 255;
          }),
          u_activeMix: selectMix,
          u_CurrentSelectedId: pickedColor,
          u_SelectColor: highlightColorInArray.map(function (c) {
            return c * 255;
          }),
          u_EnableSelect: 1
        };
        console.log(option);
        _this2.updatePickOption(option, rendererService);
        layer.models.forEach(function (model) {
          return model.addUniforms(option);
        });
      });
    }
  }]);
  return PixelPickingPlugin;
}()) || _class);