"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _l7Core = require("@antv/l7-core");
var _inversify = require("inversify");
require("reflect-metadata");
var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
/**
 * 在渲染之前需要获取当前 Shader 所需 Uniform，例如：
 * 1. 从相机服务中获取 View & ProjectionMatrix，当前缩放等级等等
 * 2. 从坐标系服务中获取当前坐标系，例如是否是偏移坐标系
 *    @see https://yuque.antfin-inc.com/yuqi.pyq/fgetpa/doml91
 * 3. 当前 Layer 本身的样式属性
 */
var ShaderUniformPlugin = exports.default = (_dec = (0, _inversify.injectable)(), _dec2 = (0, _inversify.inject)(_l7Core.TYPES.ICameraService), _dec3 = (0, _inversify.inject)(_l7Core.TYPES.ICoordinateSystemService), _dec4 = (0, _inversify.inject)(_l7Core.TYPES.IRendererService), _dec5 = (0, _inversify.inject)(_l7Core.TYPES.IMapService), _dec6 = (0, _inversify.inject)(_l7Core.TYPES.ILayerService), _dec(_class = (_class2 = /*#__PURE__*/function () {
  function ShaderUniformPlugin() {
    (0, _classCallCheck2.default)(this, ShaderUniformPlugin);
    (0, _initializerDefineProperty2.default)(this, "cameraService", _descriptor, this);
    (0, _initializerDefineProperty2.default)(this, "coordinateSystemService", _descriptor2, this);
    (0, _initializerDefineProperty2.default)(this, "rendererService", _descriptor3, this);
    (0, _initializerDefineProperty2.default)(this, "mapService", _descriptor4, this);
    (0, _initializerDefineProperty2.default)(this, "layerService", _descriptor5, this);
  }
  (0, _createClass2.default)(ShaderUniformPlugin, [{
    key: "apply",
    value: function apply(layer) {
      var _this = this;
      var version = this.mapService.version;
      var mvp = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]; // default matrix (for gaode2.x)
      var sceneCenterMercator = [0, 0];
      var uniformBuffer;
      if (!this.rendererService.uniformBuffers[0]) {
        // Create a Uniform Buffer Object(UBO).
        uniformBuffer = this.rendererService.createBuffer({
          data: new Float32Array(16 * 5 + 4 * 6 + 4),
          isUBO: true
        });
        this.rendererService.uniformBuffers[0] = uniformBuffer;
      }
      layer.hooks.beforeRender.tap('ShaderUniformPlugin', function () {
        // @ts-ignore
        var offset = layer.getLayerConfig().tileOrigin;
        // 重新计算坐标系参数
        _this.coordinateSystemService.refresh(offset);
        if (version === 'GAODE2.x') {
          _this.setLayerCenter(layer);
          // @ts-ignore
          mvp = _this.mapService.map.customCoords.getMVPMatrix();
          // mvp = amapCustomCoords.getMVPMatrix()
          // @ts-ignore
          sceneCenterMercator = _this.mapService.getCustomCoordCenter();
        }
        var _this$rendererService = _this.rendererService.getViewportSize(),
          width = _this$rendererService.width,
          height = _this$rendererService.height;
        var _this$generateUBO = _this.generateUBO(mvp, sceneCenterMercator, width, height),
          data = _this$generateUBO.data,
          uniforms = _this$generateUBO.uniforms;
        if (_this.layerService.alreadyInRendering && uniformBuffer) {
          // Update only once since all models can share one UBO.
          uniformBuffer.subData({
            offset: 0,
            data: data
          });
        }
        // For WebGL1. regl
        layer.models.forEach(function (model) {
          model.addUniforms((0, _objectSpread2.default)((0, _objectSpread2.default)({}, uniforms), {}, {
            // TODO: move these 2 uniforms to PixelPickingPlugin
            u_PickingBuffer: layer.getLayerConfig().pickingBuffer || 0,
            // Tip: 当前地图是否在拖动
            u_shaderPick: Number(layer.getShaderPickStat())
          }));
        });
      });
    }

    /**
     * 对于每个 layer 都有不同的几何中心点，因此在绘制每个 layer 的时候都需要重新设置
     * @param layer
     */
  }, {
    key: "setLayerCenter",
    value: function setLayerCenter(layer) {
      if (layer.coordCenter === undefined) {
        layer.coordCenter = layer.getSource().center;
      }
      if (this.mapService.setCoordCenter) {
        this.mapService.setCoordCenter(layer.coordCenter);
      }
    }
  }, {
    key: "generateUBO",
    value: function generateUBO(u_Mvp, sceneCenterMercator, width, height) {
      var _uniforms;
      var u_ProjectionMatrix = this.cameraService.getProjectionMatrix();
      var u_ViewMatrix = this.cameraService.getViewMatrix();
      var u_ViewProjectionMatrix = this.cameraService.getViewProjectionMatrix();
      var u_ModelMatrix = this.cameraService.getModelMatrix();
      var u_ViewportCenterProjection = this.coordinateSystemService.getViewportCenterProjection();
      var u_PixelsPerDegree = this.coordinateSystemService.getPixelsPerDegree();
      var u_Zoom = this.cameraService.getZoom();
      var u_PixelsPerDegree2 = this.coordinateSystemService.getPixelsPerDegree2();
      var u_ZoomScale = this.cameraService.getZoomScale();
      var u_PixelsPerMeter = this.coordinateSystemService.getPixelsPerMeter();
      var u_CoordinateSystem = this.coordinateSystemService.getCoordinateSystem();
      var u_CameraPosition = this.cameraService.getCameraPosition();
      var u_DevicePixelRatio = window.devicePixelRatio;
      var u_ViewportCenter = this.coordinateSystemService.getViewportCenter();
      var u_ViewportSize = [width, height];
      var u_FocalDistance = this.cameraService.getFocalDistance();
      var data = [].concat((0, _toConsumableArray2.default)(u_ViewMatrix), (0, _toConsumableArray2.default)(u_ProjectionMatrix), (0, _toConsumableArray2.default)(u_ViewProjectionMatrix), (0, _toConsumableArray2.default)(u_ModelMatrix), (0, _toConsumableArray2.default)(u_Mvp), (0, _toConsumableArray2.default)(u_ViewportCenterProjection), (0, _toConsumableArray2.default)(u_PixelsPerDegree), [
      // 4
      u_Zoom], (0, _toConsumableArray2.default)(u_PixelsPerDegree2), [
      // 4
      u_ZoomScale], (0, _toConsumableArray2.default)(u_PixelsPerMeter), [
      // 4
      u_CoordinateSystem], (0, _toConsumableArray2.default)(u_CameraPosition), [
      // 4
      u_DevicePixelRatio], (0, _toConsumableArray2.default)(u_ViewportCenter), u_ViewportSize, (0, _toConsumableArray2.default)(sceneCenterMercator), [
      // 2
      u_FocalDistance,
      // 1
      0]);
      return {
        data: data,
        uniforms: (_uniforms = {}, (0, _defineProperty2.default)(_uniforms, _l7Core.CameraUniform.ProjectionMatrix, u_ProjectionMatrix), (0, _defineProperty2.default)(_uniforms, _l7Core.CameraUniform.ViewMatrix, u_ViewMatrix), (0, _defineProperty2.default)(_uniforms, _l7Core.CameraUniform.ViewProjectionMatrix, u_ViewProjectionMatrix), (0, _defineProperty2.default)(_uniforms, _l7Core.CameraUniform.Zoom, u_Zoom), (0, _defineProperty2.default)(_uniforms, _l7Core.CameraUniform.ZoomScale, u_ZoomScale), (0, _defineProperty2.default)(_uniforms, _l7Core.CameraUniform.FocalDistance, u_FocalDistance), (0, _defineProperty2.default)(_uniforms, _l7Core.CameraUniform.CameraPosition, u_CameraPosition), (0, _defineProperty2.default)(_uniforms, _l7Core.CoordinateUniform.CoordinateSystem, u_CoordinateSystem), (0, _defineProperty2.default)(_uniforms, _l7Core.CoordinateUniform.ViewportCenter, u_ViewportCenter), (0, _defineProperty2.default)(_uniforms, _l7Core.CoordinateUniform.ViewportCenterProjection, u_ViewportCenterProjection), (0, _defineProperty2.default)(_uniforms, _l7Core.CoordinateUniform.PixelsPerDegree, u_PixelsPerDegree), (0, _defineProperty2.default)(_uniforms, _l7Core.CoordinateUniform.PixelsPerDegree2, u_PixelsPerDegree2), (0, _defineProperty2.default)(_uniforms, _l7Core.CoordinateUniform.PixelsPerMeter, u_PixelsPerMeter), (0, _defineProperty2.default)(_uniforms, _l7Core.CoordinateUniform.Mvp, u_Mvp), (0, _defineProperty2.default)(_uniforms, "u_sceneCenterMercator", sceneCenterMercator), (0, _defineProperty2.default)(_uniforms, "u_ViewportSize", u_ViewportSize), (0, _defineProperty2.default)(_uniforms, "u_ModelMatrix", u_ModelMatrix), (0, _defineProperty2.default)(_uniforms, "u_DevicePixelRatio", u_DevicePixelRatio), _uniforms)
      };
    }
  }]);
  return ShaderUniformPlugin;
}(), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "cameraService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "coordinateSystemService", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "rendererService", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "mapService", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor5 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "layerService", [_dec6], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);