import { IAnimateOption, IAttribute, IBlendOptions, IBuffer, ICameraService, IElements, IFontService, IGlobalConfigService, IIconService, IInject, ILayer, ILayerModel, ILayerService, IMapService, IModel, IModelUniform, IPickingService, IRendererService, IRenderOptions, IShaderModuleService, IStencilOptions, IStyleAttributeService, ITexture2D, ITexture2DInitializationOptions, Triangulation } from '@antv/l7-core';
export type styleSingle = number | string | [string, (single: any) => number] | [string, [number, number]];
export type styleOffset = string | [number, number] | [string, (single: any) => number];
export type styleColor = string | [string, (single: any) => string] | [string, [string, string]];
export interface IDataTextureFrame {
    data: number[];
    width: number;
    height: number;
}
export interface ICellProperty {
    attr: string;
    count: number;
}
export default class BaseModel<ChildLayerStyleOptions = {}> implements ILayerModel {
    triangulation: Triangulation;
    uniformBuffers: IBuffer[];
    textures: ITexture2D[];
    createTexture2D: (options: ITexture2DInitializationOptions) => ITexture2D;
    preStyleAttribute: Record<string, any>;
    protected encodeStyleAttribute: Record<string, boolean>;
    protected layer: ILayer;
    protected dataTexture: ITexture2D;
    protected DATA_TEXTURE_WIDTH: number;
    protected dataTextureTest: boolean;
    protected readonly configService: IGlobalConfigService;
    protected shaderModuleService: IShaderModuleService;
    protected rendererService: IRendererService;
    protected iconService: IIconService;
    protected fontService: IFontService;
    protected styleAttributeService: IStyleAttributeService;
    protected mapService: IMapService;
    protected cameraService: ICameraService;
    protected layerService: ILayerService;
    protected pickingService: IPickingService;
    protected attributeUnifoms: IBuffer;
    protected commonUnifoms: IBuffer;
    constructor(layer: ILayer);
    getBlend(): IBlendOptions;
    getStencil(option: Partial<IRenderOptions>): Partial<IStencilOptions>;
    getDefaultStyle(): unknown;
    getUninforms(): IModelUniform;
    getAnimateUniforms(): IModelUniform;
    needUpdate(): Promise<boolean>;
    buildModels(): Promise<IModel[]>;
    initModels(): Promise<IModel[]>;
    clearModels(refresh?: boolean): void;
    getAttribute(): {
        attributes: {
            [attributeName: string]: IAttribute;
        };
        elements: IElements;
    };
    render(renderOptions?: Partial<IRenderOptions>): void;
    protected registerBuiltinAttributes(): void;
    protected animateOption2Array(option: IAnimateOption): number[];
    protected startModelAnimate(): void;
    protected getInject(): IInject;
    protected getStyleAttribute(): {
        [key: string]: any;
    };
    protected registerStyleAttribute(): void;
    updateEncodeAttribute(type: string, flag: boolean): void;
    initUniformsBuffer(): void;
    protected getUniformsBufferInfo(uniformsOption: {
        [key: string]: any;
    }): {
        uniformsOption: {
            [key: string]: any;
        };
        uniformsLength: number;
        uniformsArray: number[];
    };
    protected getCommonUniformsInfo(): {
        uniformsArray: number[];
        uniformsLength: number;
        uniformsOption: {
            [key: string]: any;
        };
    };
    updateStyleUnifoms(): void;
}
