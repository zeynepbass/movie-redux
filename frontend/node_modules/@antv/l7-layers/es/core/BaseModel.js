import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _initializerDefineProperty from "@babel/runtime/helpers/esm/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/esm/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/esm/initializerWarningHelper";
var _dec, _class, _descriptor;
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { BlendType, lazyInject, MaskOperation, StencilType, TYPES } from '@antv/l7-core';
import { rgb2arr } from '@antv/l7-utils';
import { BlendTypes } from "../utils/blend";
import { getStencil as _getStencil, getStencilMask } from "../utils/stencil";
import { DefaultUniformStyleType, DefaultUniformStyleValue } from "./constant";
import { MultipleOfFourNumber } from "./utils";
import { getCommonStyleAttributeOptions, ShaderLocation } from "./CommonStyleAttribute";
var shaderLocationMap = {
  opacity: ShaderLocation.OPACITY,
  stroke: ShaderLocation.STROKE,
  offsets: ShaderLocation.OFFSETS,
  rotation: ShaderLocation.ROTATION,
  extrusionBase: ShaderLocation.EXTRUSION_BASE
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
var BaseModel = (_dec = lazyInject(TYPES.IGlobalConfigService), (_class = /*#__PURE__*/function () {
  // @lazyInject(TYPES.IIconService)
  // protected readonly iconService: IIconService;

  // @lazyInject(TYPES.IFontService)
  // protected readonly fontService: IFontService;

  // @lazyInject(TYPES.IShaderModuleService)

  // 支持数据映射的buffer
  // 不支持数据映射的buffer

  // style texture data mapping

  function BaseModel(layer) {
    _classCallCheck(this, BaseModel);
    _defineProperty(this, "uniformBuffers", []);
    _defineProperty(this, "textures", []);
    _defineProperty(this, "preStyleAttribute", {});
    _defineProperty(this, "encodeStyleAttribute", {});
    _initializerDefineProperty(this, "configService", _descriptor, this);
    this.layer = layer;
    this.rendererService = layer.getContainer().get(TYPES.IRendererService);
    this.pickingService = layer.getContainer().get(TYPES.IPickingService);
    this.shaderModuleService = layer.getContainer().get(TYPES.IShaderModuleService);
    this.styleAttributeService = layer.getContainer().get(TYPES.IStyleAttributeService);
    this.mapService = layer.getContainer().get(TYPES.IMapService);
    this.iconService = layer.getContainer().get(TYPES.IIconService);
    this.fontService = layer.getContainer().get(TYPES.IFontService);
    this.cameraService = layer.getContainer().get(TYPES.ICameraService);
    this.layerService = layer.getContainer().get(TYPES.ILayerService);
    // 初始化支持数据映射的 Style 属性

    this.registerStyleAttribute();
    // 注册 Attribute
    this.registerBuiltinAttributes();
    // 开启动画
    this.startModelAnimate();
    var createTexture2D = this.rendererService.createTexture2D;
    this.createTexture2D = createTexture2D;
  }

  // style datatexture mapping
  _createClass(BaseModel, [{
    key: "getBlend",
    value: function getBlend() {
      var _this$layer$getLayerC = this.layer.getLayerConfig(),
        _this$layer$getLayerC2 = _this$layer$getLayerC.blend,
        blend = _this$layer$getLayerC2 === void 0 ? 'normal' : _this$layer$getLayerC2;
      return BlendTypes[BlendType[blend]];
    }
  }, {
    key: "getStencil",
    value: function getStencil(option) {
      var _this$layer$getLayerC3 = this.layer.getLayerConfig(),
        _this$layer$getLayerC4 = _this$layer$getLayerC3.mask,
        mask = _this$layer$getLayerC4 === void 0 ? false : _this$layer$getLayerC4,
        _this$layer$getLayerC5 = _this$layer$getLayerC3.maskInside,
        maskInside = _this$layer$getLayerC5 === void 0 ? true : _this$layer$getLayerC5,
        enableMask = _this$layer$getLayerC3.enableMask,
        _this$layer$getLayerC6 = _this$layer$getLayerC3.maskOperation,
        maskOperation = _this$layer$getLayerC6 === void 0 ? MaskOperation.AND : _this$layer$getLayerC6;
      // TODO 临时处理，后期移除MaskLayer
      if (this.layer.type === 'MaskLayer') {
        return getStencilMask({
          isStencil: true,
          stencilType: StencilType.SINGLE
        }); // 用于遮罩的stencil 参数
      }

      if (option.isStencil) {
        return getStencilMask(_objectSpread(_objectSpread({}, option), {}, {
          maskOperation: maskOperation
        })); // 用于遮罩的stencil 参数
      }

      var maskflag = mask ||
      //  mask 兼容历史写法
      enableMask && this.layer.masks.length !== 0 ||
      // 外部图层的mask
      this.layer.tileMask !== undefined; // 瓦片图层
      // !!(mask || enableMask || this.layer.tileMask);
      return _getStencil(maskflag, maskInside);
    }
  }, {
    key: "getDefaultStyle",
    value: function getDefaultStyle() {
      return {};
    }
  }, {
    key: "getUninforms",
    value: function getUninforms() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "getAnimateUniforms",
    value: function getAnimateUniforms() {
      return {};
    }
  }, {
    key: "needUpdate",
    value: function () {
      var _needUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", false);
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function needUpdate() {
        return _needUpdate.apply(this, arguments);
      }
      return needUpdate;
    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              throw new Error('Method not implemented.');
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "initModels",
    value: function () {
      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              throw new Error('Method not implemented.');
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "clearModels",
    value: function clearModels() {
      var refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      return;
    }
  }, {
    key: "getAttribute",
    value: function getAttribute() {
      throw new Error('Method not implemented.');
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "render",
    value: function render(renderOptions) {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "animateOption2Array",
    value: function animateOption2Array(option) {
      return [option.enable ? 0 : 1.0, option.duration || 4.0, option.interval || 0.2, option.trailLength || 0.1];
    }
  }, {
    key: "startModelAnimate",
    value: function startModelAnimate() {
      var _ref = this.layer.getLayerConfig(),
        animateOption = _ref.animateOption;
      if (animateOption.enable) {
        this.layer.setAnimateStartTime();
      }
    }

    // 动态注入参与数据映射的uniform
  }, {
    key: "getInject",
    value: function getInject() {
      var encodeStyleAttribute = this.layer.encodeStyleAttribute;
      var str = '';
      // a_Position = 0
      // a_Color = 1
      // a_PickingColor = 2

      var uniforms = [];
      // 支持数据映射的类型
      this.layer.enableShaderEncodeStyles.forEach(function (key) {
        if (encodeStyleAttribute[key]) {
          // 配置了数据映射的类型
          str += "#define USE_ATTRIBUTE_".concat(key.toUpperCase(), " 0.0; \n\n");
        } else {
          uniforms.push("  ".concat(DefaultUniformStyleType[key], " u_").concat(key, ";"));
        }
        str += "\n          #ifdef USE_ATTRIBUTE_".concat(key.toUpperCase(), "\n          layout(location = ").concat(shaderLocationMap[key], ") in ").concat(DefaultUniformStyleType[key], " a_").concat(key.charAt(0).toUpperCase() + key.slice(1), ";\n        #endif\n\n        ");
      });
      var attributeUniforms = uniforms.length ? "\nlayout(std140) uniform AttributeUniforms {\n".concat(uniforms.join('\n'), "\n};\n    ") : '';
      str += attributeUniforms;
      var innerStr = '';
      this.layer.enableShaderEncodeStyles.forEach(function (key) {
        innerStr += "\n\n    #ifdef USE_ATTRIBUTE_".concat(key.toUpperCase(), "\n      ").concat(DefaultUniformStyleType[key], " ").concat(key, "  = a_").concat(key.charAt(0).toUpperCase() + key.slice(1), ";\n    #else\n      ").concat(DefaultUniformStyleType[key], " ").concat(key, " = u_").concat(key, ";\n    #endif\n\n    ");
      });
      return {
        'vs:#decl': str,
        'fs:#decl': attributeUniforms,
        'vs:#main-start': innerStr
      };
    }

    // 获取数据映射样式
  }, {
    key: "getStyleAttribute",
    value: function getStyleAttribute() {
      var _this = this;
      var options = {};
      // TODO: 优化
      this.layer.enableShaderEncodeStyles.forEach(function (key) {
        if (!_this.layer.encodeStyleAttribute[key]) {
          // 没有设置样式映射
          // @ts-ignore
          var keyValue = _this.layer.getLayerConfig()[key];
          var value = typeof keyValue === 'undefined' ? DefaultUniformStyleValue[key] : keyValue;
          if (key === 'stroke') {
            value = rgb2arr(value);
          }
          options['u_' + key] = value;
        }
      });
      return options;
    }
    // 注册数据映射样式
  }, {
    key: "registerStyleAttribute",
    value: function registerStyleAttribute() {
      var _this2 = this;
      Object.keys(this.layer.encodeStyleAttribute).forEach(function (key) {
        var options = getCommonStyleAttributeOptions(key);
        if (options) {
          _this2.styleAttributeService.registerStyleAttribute(options);
          if (options.descriptor) {
            options.descriptor.shaderLocation = shaderLocationMap[key];
          }
        }
      });
    }
  }, {
    key: "updateEncodeAttribute",
    value: function updateEncodeAttribute(type, flag) {
      this.encodeStyleAttribute[type] = flag;
    }
  }, {
    key: "initUniformsBuffer",
    value: function initUniformsBuffer() {
      var attrUniforms = this.getUniformsBufferInfo(this.getStyleAttribute());
      var commonUniforms = this.getCommonUniformsInfo();
      this.attributeUnifoms = this.rendererService.createBuffer({
        data: new Float32Array(MultipleOfFourNumber(attrUniforms.uniformsLength)),
        // 长度需要大于等于 4
        isUBO: true
      });
      this.commonUnifoms = this.rendererService.createBuffer({
        data: new Float32Array(MultipleOfFourNumber(commonUniforms.uniformsLength)),
        isUBO: true
      });
      this.uniformBuffers = [this.attributeUnifoms, this.commonUnifoms];
    }
    // 获取数据映射 uniform 信息
  }, {
    key: "getUniformsBufferInfo",
    value: function getUniformsBufferInfo(uniformsOption) {
      var uniformsLength = 0;
      var uniformsArray = [];
      Object.values(uniformsOption).forEach(function (value) {
        if (Array.isArray(value)) {
          uniformsArray.push.apply(uniformsArray, _toConsumableArray(value));
          uniformsLength += value.length;
        } else {
          uniformsArray.push(value);
          uniformsLength += 1;
        }
      });
      return {
        uniformsOption: uniformsOption,
        uniformsLength: uniformsLength,
        uniformsArray: uniformsArray
      };
    }
  }, {
    key: "getCommonUniformsInfo",
    value: function getCommonUniformsInfo() {
      return {
        uniformsLength: 0,
        uniformsArray: [],
        uniformsOption: {}
      };
    }

    // 更新支持数据映射的uniform
  }, {
    key: "updateStyleUnifoms",
    value: function updateStyleUnifoms() {
      var _this$getUniformsBuff = this.getUniformsBufferInfo(this.getStyleAttribute()),
        uniformsArray = _this$getUniformsBuff.uniformsArray;
      var _this$getCommonUnifor = this.getCommonUniformsInfo(),
        commonUniformsArray = _this$getCommonUnifor.uniformsArray;
      this.attributeUnifoms.subData({
        offset: 0,
        data: new Uint8Array(new Float32Array(uniformsArray).buffer)
      });
      this.commonUnifoms.subData({
        offset: 0,
        data: new Uint8Array(new Float32Array(commonUniformsArray).buffer)
      });
    }
  }]);
  return BaseModel;
}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "configService", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class));
export { BaseModel as default };