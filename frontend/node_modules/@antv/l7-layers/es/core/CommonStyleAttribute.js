import { AttributeType, gl } from '@antv/l7-core';
export var ShaderLocation = /*#__PURE__*/function (ShaderLocation) {
  ShaderLocation[ShaderLocation["POSITION"] = 0] = "POSITION";
  ShaderLocation[ShaderLocation["COLOR"] = 1] = "COLOR";
  ShaderLocation[ShaderLocation["VERTEX_ID"] = 2] = "VERTEX_ID";
  ShaderLocation[ShaderLocation["PICKING_COLOR"] = 3] = "PICKING_COLOR";
  ShaderLocation[ShaderLocation["STROKE"] = 4] = "STROKE";
  ShaderLocation[ShaderLocation["OPACITY"] = 5] = "OPACITY";
  ShaderLocation[ShaderLocation["OFFSETS"] = 6] = "OFFSETS";
  ShaderLocation[ShaderLocation["ROTATION"] = 7] = "ROTATION";
  ShaderLocation[ShaderLocation["EXTRUSION_BASE"] = 8] = "EXTRUSION_BASE";
  ShaderLocation[ShaderLocation["SIZE"] = 9] = "SIZE";
  ShaderLocation[ShaderLocation["SHAPE"] = 10] = "SHAPE";
  ShaderLocation[ShaderLocation["EXTRUDE"] = 11] = "EXTRUDE";
  ShaderLocation[ShaderLocation["MAX"] = 12] = "MAX";
  ShaderLocation[ShaderLocation["NORMAL"] = 13] = "NORMAL";
  return ShaderLocation;
}({});
export function getCommonStyleAttributeOptions(name) {
  switch (name) {
    // // roate
    case 'rotation':
      return {
        name: 'Rotation',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Rotation',
          shaderLocation: ShaderLocation.ROTATION,
          buffer: {
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature) {
            var _feature$rotation = feature.rotation,
              rotation = _feature$rotation === void 0 ? 0 : _feature$rotation;
            return Array.isArray(rotation) ? [rotation[0]] : [rotation];
          }
        }
      };
    case 'stroke':
      return {
        name: 'stroke',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Stroke',
          shaderLocation: ShaderLocation.STROKE,
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 4,
          update: function update(feature) {
            var _feature$stroke = feature.stroke,
              stroke = _feature$stroke === void 0 ? [1, 1, 1, 1] : _feature$stroke;
            return stroke;
          }
        }
      };
    case 'opacity':
      return {
        name: 'opacity',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Opacity',
          shaderLocation: ShaderLocation.OPACITY,
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature) {
            var _feature$opacity = feature.opacity,
              op = _feature$opacity === void 0 ? 1 : _feature$opacity;
            return [op];
          }
        }
      };
    case 'extrusionBase':
      return {
        name: 'extrusionBase',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_ExtrusionBase',
          shaderLocation: ShaderLocation.EXTRUSION_BASE,
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature) {
            var _feature$extrusionBas = feature.extrusionBase,
              op = _feature$extrusionBas === void 0 ? 0 : _feature$extrusionBas;
            return [op];
          }
        }
      };
    case 'offsets':
      return {
        name: 'offsets',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Offsets',
          shaderLocation: ShaderLocation.OFFSETS,
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature) {
            var epo = feature.offsets;
            return epo;
          }
        }
      };
    case 'thetaOffset':
      return {
        name: 'thetaOffset',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_ThetaOffset',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature) {
            var _feature$thetaOffset = feature.thetaOffset,
              op = _feature$thetaOffset === void 0 ? 1 : _feature$thetaOffset;
            return [op];
          }
        }
      };
    default:
      return undefined;
  }
}