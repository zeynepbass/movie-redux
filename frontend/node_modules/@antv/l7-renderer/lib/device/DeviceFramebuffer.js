var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/device/DeviceFramebuffer.ts
var DeviceFramebuffer_exports = {};
__export(DeviceFramebuffer_exports, {
  default: () => DeviceFramebuffer
});
module.exports = __toCommonJS(DeviceFramebuffer_exports);
var import_g_device_api = require("@antv/g-device-api");
var import_DeviceTexture2D = require("./DeviceTexture2D");
var DeviceFramebuffer = class {
  constructor(device, options) {
    this.device = device;
    const { width, height, color } = options;
    if ((0, import_DeviceTexture2D.isTexture2D)(color)) {
      this.renderTarget = device.createRenderTargetFromTexture(
        color.get()
      );
      this.width = color["width"];
      this.height = color["height"];
    } else if (width && height) {
      this.renderTarget = device.createRenderTarget({
        format: import_g_device_api.Format.U8_RGBA_RT,
        width,
        height
      });
      this.width = width;
      this.height = height;
    }
  }
  get() {
    return this.renderTarget;
  }
  destroy() {
    this.renderTarget.destroy();
  }
  resize({ width, height }) {
    if (this.width !== width || this.height !== height) {
      if (this.renderTarget) {
        this.renderTarget.destroy();
      }
      this.renderTarget = this.device.createRenderTarget({
        format: import_g_device_api.Format.U8_RGBA_RT,
        width,
        height
      });
      this.width = width;
      this.height = height;
    }
  }
};
