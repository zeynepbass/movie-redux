var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/device/DeviceTexture2D.ts
var DeviceTexture2D_exports = {};
__export(DeviceTexture2D_exports, {
  default: () => DeviceTexture2D,
  isTexture2D: () => isTexture2D
});
module.exports = __toCommonJS(DeviceTexture2D_exports);
var import_g_device_api = require("@antv/g-device-api");
var import_l7_core = require("@antv/l7-core");
var import_constants = require("./constants");
function isTexture2D(t) {
  return false;
}
var DeviceTexture2D = class {
  constructor(device, options) {
    this.isDestroy = false;
    const {
      data,
      type = import_l7_core.gl.UNSIGNED_BYTE,
      width,
      height,
      flipY = false,
      format = import_l7_core.gl.RGBA,
      wrapS = import_l7_core.gl.CLAMP_TO_EDGE,
      wrapT = import_l7_core.gl.CLAMP_TO_EDGE,
      // aniso = 0,
      alignment = 1
      // mipmap = false,
      // premultiplyAlpha = false,
      // mag = gl.NEAREST,
      // min = gl.NEAREST,
      // colorSpace = gl.BROWSER_DEFAULT_WEBGL,
      // x = 0,
      // y = 0,
      // copy = false,
    } = options;
    this.width = width;
    this.height = height;
    let pixelFormat = import_g_device_api.Format.U8_RGBA_RT;
    if (type === import_l7_core.gl.UNSIGNED_BYTE && format === import_l7_core.gl.RGBA) {
      pixelFormat = import_g_device_api.Format.U8_RGBA_RT;
    } else if (format === import_l7_core.gl.LUMINANCE && type === import_l7_core.gl.FLOAT) {
      pixelFormat = import_g_device_api.Format.F32_LUMINANCE;
    } else if (format === import_l7_core.gl.LUMINANCE && type === import_l7_core.gl.UNSIGNED_BYTE) {
      pixelFormat = import_g_device_api.Format.U8_LUMINANCE;
    } else {
      throw new Error(`create texture error, type: ${type}, format: ${format}`);
    }
    this.texture = device.createTexture({
      format: pixelFormat,
      width,
      height,
      usage: import_g_device_api.TextureUsage.SAMPLED,
      pixelStore: {
        unpackFlipY: flipY,
        packAlignment: alignment
      }
    });
    if (data) {
      this.texture.setImageData([data]);
    }
    this.sampler = device.createSampler({
      addressModeU: import_constants.wrapModeMap[wrapS],
      addressModeV: import_constants.wrapModeMap[wrapT],
      minFilter: import_g_device_api.FilterMode.POINT,
      // TODO: use mag & min
      magFilter: import_g_device_api.FilterMode.BILINEAR,
      mipmapFilter: import_g_device_api.MipmapFilterMode.NO_MIP,
      lodMinClamp: 0,
      lodMaxClamp: 0
      // maxAnisotropy: aniso,
    });
  }
  get() {
    return this.texture;
  }
  update(props) {
    const { data } = props;
    this.texture.setImageData([data]);
  }
  bind() {
  }
  resize({ width, height }) {
    this.width = width;
    this.height = height;
  }
  getSize() {
    return [this.width, this.height];
  }
  destroy() {
    var _a;
    if (!this.isDestroy) {
      (_a = this.texture) == null ? void 0 : _a.destroy();
    }
    this.isDestroy = true;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  isTexture2D
});
