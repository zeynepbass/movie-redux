import { IAttribute, IAttributeInitializationOptions, IBuffer, IBufferInitializationOptions, IElements, IElementsInitializationOptions, IExtensions, IFramebufferInitializationOptions, IModel, IModelInitializationOptions, IRenderConfig, IRendererService, ITexture2D, ITexture2DInitializationOptions } from '@antv/l7-core';
import 'reflect-metadata';
import DeviceFramebuffer from './DeviceFramebuffer';
/**
 * Device API renderer
 */
export default class DeviceRendererService implements IRendererService {
    uniformBuffers: IBuffer[];
    extensionObject: IExtensions;
    private device;
    private swapChain;
    private $container;
    private canvas;
    private width;
    private height;
    private isDirty;
    private renderPass;
    private renderTarget;
    private mainDepthRT;
    init(canvas: HTMLCanvasElement, cfg: IRenderConfig): Promise<void>;
    beginFrame(): void;
    endFrame(): void;
    getPointSizeRange(): any;
    testExtension(name: string): boolean;
    createModel: (options: IModelInitializationOptions) => IModel;
    createAttribute: (options: IAttributeInitializationOptions) => IAttribute;
    createBuffer: (options: IBufferInitializationOptions) => IBuffer;
    createElements: (options: IElementsInitializationOptions) => IElements;
    createTexture2D: (options: ITexture2DInitializationOptions) => ITexture2D;
    createFramebuffer: (options: IFramebufferInitializationOptions) => DeviceFramebuffer;
    useFramebuffer: () => void;
    clear: () => void;
    viewport: ({ width, height, }: {
        x: number;
        y: number;
        width: number;
        height: number;
    }) => void;
    readPixels: () => Uint8Array;
    getViewportSize: () => {
        width: any;
        height: any;
    };
    getContainer: () => HTMLElement | null;
    getCanvas: () => HTMLCanvasElement;
    getGLContext: () => WebGLRenderingContext;
    setState(): void;
    setBaseState(): void;
    setCustomLayerDefaults(): void;
    setDirty(flag: boolean): void;
    getDirty(): boolean;
    destroy: () => void;
}
