import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { BufferUsage } from '@antv/g-device-api';
import { gl } from '@antv/l7-core';
import { typedArrayCtorMap } from "./constants";
import { isTypedArray } from "./utils/typedarray";
var DeviceElements = /*#__PURE__*/function () {
  function DeviceElements(device, options) {
    _classCallCheck(this, DeviceElements);
    var data = options.data,
      type = options.type,
      _options$count = options.count,
      count = _options$count === void 0 ? 0 : _options$count;
    var typed;
    if (isTypedArray(data)) {
      typed = data;
    } else {
      typed = new typedArrayCtorMap[this.type || gl.UNSIGNED_INT](data);
    }
    this.type = type;
    this.count = count;
    this.indexBuffer = device.createBuffer({
      viewOrSize: typed,
      usage: BufferUsage.INDEX
    });
  }
  _createClass(DeviceElements, [{
    key: "get",
    value: function get() {
      return this.indexBuffer;
    }
  }, {
    key: "subData",
    value: function subData(_ref) {
      var data = _ref.data;
      var typed;
      if (isTypedArray(data)) {
        typed = data;
      } else {
        typed = new typedArrayCtorMap[this.type || gl.UNSIGNED_INT](data);
      }
      this.indexBuffer.setSubData(0, new Uint8Array(typed.buffer));
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.indexBuffer.destroy();
    }
  }]);
  return DeviceElements;
}();
export { DeviceElements as default };