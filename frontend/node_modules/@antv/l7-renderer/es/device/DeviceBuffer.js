import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { BufferUsage } from '@antv/g-device-api';
import { gl } from '@antv/l7-core';
import { hintMap, typedArrayCtorMap } from "./constants";
import { isTypedArray } from "./utils/typedarray";

/**
 * Use Buffer from @antv/g-device-api
 */
var DeviceBuffer = /*#__PURE__*/function () {
  function DeviceBuffer(device, options) {
    _classCallCheck(this, DeviceBuffer);
    _defineProperty(this, "isDestroyed", false);
    var data = options.data,
      usage = options.usage,
      type = options.type,
      isUBO = options.isUBO;
    var typed;
    if (isTypedArray(data)) {
      typed = data;
    } else {
      typed = new typedArrayCtorMap[this.type || gl.FLOAT](data);
    }
    this.type = type;
    this.size = typed.byteLength;

    // @see https://www.npmjs.com/package/@antv/g-device-api#createBuffer
    this.buffer = device.createBuffer({
      viewOrSize: typed,
      usage: isUBO ? BufferUsage.UNIFORM : BufferUsage.VERTEX,
      hint: hintMap[usage || gl.STATIC_DRAW]
    });
  }
  _createClass(DeviceBuffer, [{
    key: "get",
    value: function get() {
      return this.buffer;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (!this.isDestroyed) {
        this.buffer.destroy();
      }
      this.isDestroyed = true;
    }
  }, {
    key: "subData",
    value: function subData(_ref) {
      var data = _ref.data,
        offset = _ref.offset;
      var typed;
      if (isTypedArray(data)) {
        typed = data;
      } else {
        typed = new typedArrayCtorMap[this.type || gl.FLOAT](data);
      }
      this.buffer.setSubData(offset, new Uint8Array(typed.buffer));
    }
  }]);
  return DeviceBuffer;
}();
export { DeviceBuffer as default };