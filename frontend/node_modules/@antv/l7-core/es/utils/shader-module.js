export function getUniformLengthByType(type) {
  var arrayLength = 0;
  switch (type) {
    case 'vec2':
    case 'ivec2':
      arrayLength = 2;
      break;
    case 'vec3':
    case 'ivec3':
      arrayLength = 3;
      break;
    case 'vec4':
    case 'ivec4':
    case 'mat2':
      arrayLength = 4;
      break;
    case 'mat3':
      arrayLength = 9;
      break;
    case 'mat4':
      arrayLength = 16;
      break;
    default:
  }
  return arrayLength;
}
var uniformRegExp = /uniform\s+(bool|float|int|vec2|vec3|vec4|ivec2|ivec3|ivec4|mat2|mat3|mat4|sampler2D|samplerCube)\s+([\s\S]*?);/g;
function fillUniforms(content) {
  var uniformPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var uniforms = {};
  content = content.replace(uniformRegExp, function (_, type, c) {
    var defaultValues = c.split(':');
    var uniformName = defaultValues[0].trim();
    var defaultValue = '';
    if (defaultValues.length > 1) {
      defaultValue = defaultValues[1].trim();
    }

    // set default value for uniform according to its type
    // eg. vec2 u -> [0.0, 0.0]
    switch (type) {
      case 'bool':
        defaultValue = defaultValue === 'true';
        break;
      case 'float':
      case 'int':
        defaultValue = Number(defaultValue);
        break;
      case 'vec2':
      case 'vec3':
      case 'vec4':
      case 'ivec2':
      case 'ivec3':
      case 'ivec4':
      case 'mat2':
      case 'mat3':
      case 'mat4':
        if (defaultValue) {
          defaultValue = defaultValue.replace('[', '').replace(']', '').split(',').reduce(function (prev, cur) {
            prev.push(Number(cur.trim()));
            return prev;
          }, []);
        } else {
          defaultValue = new Array(getUniformLengthByType(type)).fill(0);
        }
        break;
      default:
    }

    // @ts-ignore
    uniforms[uniformName] = defaultValue;
    return "".concat(uniformPrefix ? 'uniform ' : '').concat(type, " ").concat(uniformName, ";\n");
  });
  return {
    content: content,
    uniforms: uniforms
  };
}
export function extractUniforms(content) {
  // eslint-disable-next-line prefer-const
  var _fillUniforms = fillUniforms(content, true),
    c = _fillUniforms.content,
    u = _fillUniforms.uniforms;
  c = c.replace(/(\s*uniform\s*.*\s*){((?:\s*.*\s*)*?)};/g, function (substr, header, uniforms) {
    uniforms = uniforms.trim().replace(/^.*$/gm, function (uniform) {
      return "uniform ".concat(uniform);
    });
    var _fillUniforms2 = fillUniforms(uniforms),
      cc = _fillUniforms2.content,
      uu = _fillUniforms2.uniforms;
    Object.assign(u, uu);
    return "".concat(header, "{\n").concat(cc, "\n};");
  });
  return {
    content: c,
    uniforms: u
  };
}
export function removeDuplicateUniforms(content) {
  var uniforms = {};
  return content.replace(uniformRegExp, function (_, type, uniformName) {
    var name = uniformName.trim();
    if (!uniforms[name]) {
      uniforms[name] = true;
      return "uniform ".concat(type, " ").concat(name, ";\n");
    } else {
      return '';
    }
  });
}